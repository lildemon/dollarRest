// Generated by CoffeeScript 1.7.1
var $, ComplexRequest, Q, ajaxClient, client, defaultInitHandler, defaultRequestHandler, defaultResponseHandler, interceptor, mixin, race, responsePromise;

responsePromise = require('./util/responsePromise');

client = require('./client');

Q = require('q');

ajaxClient = require('./ajaxClient');

$ = require('jquery');

mixin = require('./util/mixin');

defaultInitHandler = function(config) {
  return config;
};

defaultRequestHandler = function(request, config, meta) {
  return request;
};

defaultResponseHandler = function(response, config, meta) {
  return response;
};

race = function(promisesOrValues) {
  return new Q.Promise(function(resolve, reject) {
    return $.each(promisesOrValues, function(promiseOrValue) {
      return Q(promiseOrValue, resolve, reject);
    });
  });
};

ComplexRequest = function(properties) {
  if (!(this instanceof ComplexRequest)) {
    return new ComplexRequest(properties);
  }
  return mixin(this, properties);
};

interceptor = function(handlers) {
  var errorResponseHandler, initHandler, requestHandler, successResponseHandler;
  handlers = handlers || {};
  initHandler = handlers.init || defaultInitHandler;
  requestHandler = handlers.request || defaultRequestHandler;
  successResponseHandler = handlers.success || handlers.response || defaultResponseHandler;
  errorResponseHandler = handlers.error || function() {
    return Q((handlers.response || defaultResponseHandler).apply(this, arguments), Q.reject, Q.reject);
  };
  return function(target, config) {
    var interceptedClient;
    if (typeof target === 'object') {
      config = target;
    }
    if (target !== 'function') {
      target = handlers.client || defaultClient;
    }
    config = initHandler(config || {});
    interceptedClient = function(request) {
      var context, meta;
      context = {};
      meta = {
        'arguments': Array.prototype.slice.call(arguments),
        client: interceptedClient
      };
      request = typeof request === 'string' ? {
        path: request
      } : request || {};
      request.originator = request.originator || interceptedClient;
      return responsePromise(requestHandler.call(context, request, config, meta), function(request) {
        var abort, next, response;
        next = target;
        if (request instanceof ComplexRequest) {
          abort = request.abort;
          next = request.client || next;
          response = request.response;
          request = request.request;
        }
        response = response || Q(request).then(function(request) {
          return Q(next(request), function(response) {
            return successResponseHandler.call(context, response, config, meta);
          }, function(response) {
            return errorResponseHandler.call(context, response, config, meta);
          });
        });
        if (abort) {
          return race([response, abort]);
        } else {
          return response;
        }
      }, function(error) {
        return Q.reject({
          request: request,
          error: error
        });
      });
    };
    return client(interceptedClient, target);
  };
};

interceptor.ComplexRequest = ComplexRequest;

return interceptor;
